#include <Arduino.h>
#include <SoftwareSerial.h>

#include "packets.h"
#include "utils.h"

#define JOY_X_PIN A2
#define JOY_Y_PIN A3

#define STEERING_RATIO_PIN A0
#define THROTTLE_RATIO_PIN A1

#define MODE_PIN 4
#define MODE_LED_PIN 2

bool lastModeButtonState = LOW;
byte mode = 0;

SoftwareSerial btSerial(12, 11);

UpStream upStream;

unsigned long previousMillis = 0;
unsigned long previousMotionMillis = 0;
const long interval = 100;

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(MODE_PIN, INPUT_PULLUP);
  pinMode(MODE_LED_PIN, OUTPUT);

  Serial.begin(9600);
  btSerial.begin(9600);
}

void loop() {
  unsigned long currentMillis = millis();

  bool modeButtonState = digitalRead(MODE_PIN);

  if ((previousMotionMillis - previousMillis >= interval) && modeButtonState == LOW && lastModeButtonState == HIGH) {
    previousMotionMillis = currentMillis;
    mode = (mode + 1) % 2;
    if (mode == 0) {
      digitalWrite(MODE_LED_PIN, LOW);
    } else {
      digitalWrite(MODE_LED_PIN, HIGH);
    }
  }
  lastModeButtonState = modeButtonState;

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    int xAxis = analogRead(JOY_X_PIN);
    int yAxis = analogRead(JOY_Y_PIN);

    int steering = 0;
    int throttle = 0;

    int steeringRatio = analogRead(STEERING_RATIO_PIN);
    int throttleRatio = analogRead(THROTTLE_RATIO_PIN);

    if (xAxis >= 550) {
      steering = map(xAxis, 550, 1023, 0, 255);
    } else if (xAxis <= 480) {
      steering = map(xAxis, 480, 0, 0, -255);
    }

    if (yAxis >= 550) {
      throttle = map(yAxis, 550, 1023, 0, 255);
      upStream.reverse = true;
    } else if (yAxis <= 480) {
      upStream.reverse = false;
      throttle = map(yAxis, 480, 0, 0, 255);
    }

    upStream.steering = steering * (float)steeringRatio / 1023.0;
    upStream.throttle = throttle * (float)throttleRatio / 1023.0;
    upStream.brakeDistance = 50;

    upStream.mode = mode;
    upStream.potL = map(throttleRatio, 0, 1023, 0, 90);
    upStream.potR = map(steeringRatio, 0, 1023, 0, 90);
    upStream.potM = map(steering, 255, -255, 0, 90);

    printDataPacket(upStream);

    btSerial.write((uint8_t*)&upStream, sizeof(UpStream));
  }
}
